// Version stuff for auto generated versionName and versionCode
def appVersionMajor = 1
def appVersionMinor = 0
def appVersionPatch = 0

// Git hash and build time for app's BuildConfig
def appGitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def appBuildTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))

buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://jitpack.io" }
    }

    dependencies {
        //noinspection GradleDynamicVersion
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'me.tatarka:gradle-retrolambda:3.3.0-beta4'
    }
}

repositories {
    maven { url "https://jitpack.io" }
}

//
// +------------------------------------------------------------+
// | Configure parameters for the android build. Android DSL    |
// +------------------------------------------------------------+
// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

// Main
apply plugin: 'com.android.application'
// Fabric (Crashlytics, ...)
apply plugin: 'io.fabric'
// Apt
apply plugin: 'com.neenbedankt.android-apt'
// Local
if (new File('app/local.gradle').exists()) { apply from: 'local.gradle' }
// Retrolambda (apply this plugin last)
apply plugin: 'me.tatarka.retrolambda'

repositories {
    // Snapshots
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    // Maven Central
    mavenCentral()
    // Jcenter is superset of Maven Central
    jcenter()
    // Project local
    flatDir { dirs 'libs' }
    // System local
    maven { url 'file:' + System.getenv('HOME') + '/.m2/repository' }
    // Fabric
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "org.brainail.EverboxingSplashFlame"

        minSdkVersion 15
        targetSdkVersion 22

        versionCode appVersionMajor * 10000 + appVersionMinor * 100 + appVersionPatch
        versionName "${appVersionMajor}.${appVersionMinor}.${appVersionPatch}"

        // Build config fields
        buildConfigField "String", "MODULE_NAME", "\"$project.name\""

        buildConfigField "String", "GIT_SHA_KEY", "\"Git SHA\""
        buildConfigField "String", "GIT_SHA", "\"${appGitSha}\""

        buildConfigField "String", "BUILD_TIME_KEY", "\"Build TIME\""
        buildConfigField "String", "BUILD_TIME", "\"${appBuildTime}\""

        buildConfigField('String', 'APP_DIR', "\"${appDir}\"")

        manifestPlaceholders = [ fabricApiKey: "${fabricApiKey}" ]

        vectorDrawables.useSupportLibrary = true
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir 'libs'
    }

    signingConfigs {
        release {
            try {
                // Load properties
                Properties signProperties = new Properties()
                signProperties.load(new FileInputStream(rootProject.file('sign/sign.properties')))

                // Assign properties
                storeFile file(signProperties.STORE_FILE)
                storePassword signProperties.STORE_PASSWORD
                keyAlias signProperties.KEY_ALIAS
                keyPassword signProperties.KEY_PASSWORD
            } catch (ignored) {
                throw new IllegalAccessException("You should provide sign.properties file")
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"

            // Build config fields
            buildConfigField "boolean", "LOGGABLE", "true"

            // buildConfigField "boolean", "USE_CRASHLYTICS", "false"
            // ext.enableCrashlytics = false
            buildConfigField "boolean", "USE_CRASHLYTICS", "true"
            ext.enableCrashlytics = true

            buildConfigField "boolean", "USE_LEAKCANARY", "false"
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles 'proguard-rules.txt'

            // Build config fields
            buildConfigField "boolean", "LOGGABLE", "false"

            buildConfigField "boolean", "USE_CRASHLYTICS", "true"
            ext.enableCrashlytics = true

            buildConfigField "boolean", "USE_LEAKCANARY", "false"

            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        // ButterKnife
        disable 'InvalidPackage'
        // set to true to turn off analysis progress reporting by lint
        quiet false
        // if true, stop the gradle build if errors are found
        abortOnError false
        // if true, only report errors
        ignoreWarnings false
        // if true, check all issues, including those that are off by default
        checkAllWarnings false
        // if true, treat all warnings as errors
        warningsAsErrors false
        // if true, generate an XML report for use by for example Jenkins
        xmlReport false
        // if true, generate an HTML report (with issue explanations, sourcecode, etc)
        htmlReport true
        // optional path to report (default will be lint-results.html in the build dir)
        htmlOutput file("$project.buildDir/reports/lint/lint.html")
    }

    packagingOptions {
        // Common
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
        exclude 'NOTICE.txt'
        exclude 'LICENSE'
        exclude 'NOTICE'
        exclude '.readme'

        // ButterKnife
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    dexOptions {
        jumboMode = true
    }

    productFlavors {
        // The actual minSdkVersion for the application.
        normal {
            minSdkVersion 15
        }

        // Utilizes minSdkVersion = 21 to allow the Android gradle plugin
        // to pre-dex each module and produce an APK that can be tested on
        // Android Lollipop without time consuming dex merging processes.
        lollipop {
            minSdkVersion 21
        }
    }
}

//
// +------------------------------------------------------------+
// | Dependencies                                               |
// +------------------------------------------------------------+
// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

ext {
    supportLibVersion = '23.4.0'
    playServicesLibVersion = '8.4.0'
    leakCanaryLibVersion = '1.4-beta2'
    butterKnifeLibVersion = '8.1.0'
    crashlyticsLibVersion = '2.5.5'
    constraintLayoutLibVersion = '1.0.0-alpha3'
    glideLibVersion = '3.7.0'
    dagger2LibVersion = '2.4'
}

dependencies {
    // ... Libs folder > local
    compile fileTree(dir: 'libs', include: ['*.jar'])
    // ... Support libraries > backward compatibility
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support:customtabs:${supportLibVersion}"
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:percent:${supportLibVersion}"
    compile "com.android.support.constraint:constraint-layout:${constraintLayoutLibVersion}"
    // ... Google play services > google features
    compile "com.google.android.gms:play-services-base:${playServicesLibVersion}"
    compile "com.google.android.gms:play-services-drive:${playServicesLibVersion}"
    compile "com.google.android.gms:play-services-plus:${playServicesLibVersion}"
    // ... Fabric > crashes
    compile("com.crashlytics.sdk.android:crashlytics:${crashlyticsLibVersion}@aar") { transitive = true; }
    // ... Leakcanary > leaks
    debugCompile "com.squareup.leakcanary:leakcanary-android:${leakCanaryLibVersion}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryLibVersion}"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryLibVersion}"
    // ... Butterknife > view binding
    compile "com.jakewharton:butterknife:${butterKnifeLibVersion}"
    apt "com.jakewharton:butterknife-compiler:${butterKnifeLibVersion}"
    // ... Glide > load images
    compile "com.github.bumptech.glide:glide:${glideLibVersion}"
    // ... Material stuff > icons, fab
    compile 'com.malinskiy:materialicons:1.0.2'
    compile 'com.github.clans:fab:1.6.2'
    // ... Fonts
    compile 'uk.co.chrisjenx:calligraphy:2.1.0'
    // ... About > intro, about
    compile('com.mikepenz:aboutlibraries:5.5.7@aar') { transitive = true }
    compile 'com.github.paolorotolo:appintro:3.3.0'
    // ... Retrolambda > java8
    retrolambdaConfig 'net.orfjackal.retrolambda:retrolambda:+'
    // ... Rx > java, android, binding, lifecycle, etc ...
    compile 'io.reactivex:rxjava:1.1.5'
    compile 'io.reactivex:rxandroid:1.2.0'
    compile 'com.jakewharton.rxbinding:rxbinding:0.4.0'
    // ... Dagger2 > injection
    compile "com.google.dagger:dagger:${dagger2LibVersion}"
    apt "com.google.dagger:dagger-compiler:${dagger2LibVersion}"
    provided 'org.glassfish:javax.annotation:10.0-b28' // Required by Dagger2
    // ... Bus > events, communication
    // compile 'org.simple:androideventbus:1.0.5.1'
    compile 'org.greenrobot:eventbus:3.0.0'
    // ... Icepick > args, bundle, saved state
    // compile "frankiesardo:icepick:${icepickVersion}"
    // provided "frankiesardo:icepick-processor:${icepickVersion}"
    // ... Bolts > Background tasks
    // compile 'com.parse.bolts:bolts-tasks:1.4.0'

    // Hardy dialogs > custom
    debugCompile project(path: ':EverboxingHardyDialogs', configuration: 'debug')
    releaseCompile project(path: ':EverboxingHardyDialogs', configuration: 'release')
    // Tools > custom
    debugCompile project(path: ':EverboxingTools', configuration: 'debug')
    releaseCompile project(path: ':EverboxingTools', configuration: 'release')
}

//
// +------------------------------------------------------------+
// | Configure tests dependencies                               |
// +------------------------------------------------------------+
// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

// apply plugin: 'org.robolectric'

// To run through the Studio (previous approach)
// apply from: 'robolectric-iml.gradle'

dependencies {
    // Tests
    testCompile "junit:junit:4.12"
    testCompile('org.robolectric:robolectric:3.1') {
        exclude module: 'commons-logging'
        exclude module: 'httpclient'

        // WARNING: Conflict with dependency 'com.ibm.icu:icu4j'.
        // Resolved versions for app (52.1) and test app (53.1) differ.
        // See http://g.co/androidstudio/app-test-app-conflict for details.
        exclude group: 'com.ibm.icu'
    }

    // Checks
    testCompile "com.squareup:fest-android:1.0.8"
    testCompile('com.squareup.assertj:assertj-android:1.1.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    // Mocks
    testCompile('org.powermock:powermock-module-junit4:1.6.4') {
        exclude group: 'org.hamcrest'
    }
    testCompile('org.powermock:powermock-api-mockito:1.6.4') {
        exclude group: 'org.hamcrest'
    }
}

// project.gradle.taskGraph.whenReady {
//     testDebug {
//         ignoreFailures = true
//     }
// }

//
// +------------------------------------------------------------+
// | Configure analyzers                                        |
// +------------------------------------------------------------+
// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

// Add checkstyle, findbugs, pmd and lint to the check task.
task analyzecode(type: SourceTask) {
    description 'All checks for code'
}

analyzecode.dependsOn 'checkstyle', 'findbugs', 'pmd', 'lint'

//
// +------------------------------------------------------------+
// | Configure checkstyle                                       |
// +------------------------------------------------------------+
// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

apply plugin: 'checkstyle'

task checkstyle(type: Checkstyle) {
    description 'Check code style'
    ignoreFailures = true
    configFile file('config/checkstyle/checkstyle.xml')
    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

//
// +------------------------------------------------------------+
// | Configure findbugs                                         |
// +------------------------------------------------------------+
// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

apply plugin: "findbugs"

task findbugs(type: FindBugs) {
    description 'Find bugs'
    ignoreFailures = true
    source = fileTree('src/main/java/')
    classes = fileTree('build/intermediates/classes/debug/')
    classpath = files()
    effort = 'max'
    reportLevel = "high"
    include '**/*.java'
    exclude '**/gen/**'
    excludeFilter = new File('config/findbugs/findbugs-config.xml')
    reports {
        html.enabled = true
        xml.enabled = !html.enabled
    }
}

//
// +------------------------------------------------------------+
// | Configure pmd                                              |
// +------------------------------------------------------------+
// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

apply plugin: "pmd"

task pmd(type: Pmd) {
    description 'Analyze code via Pmd'
    ignoreFailures = true
    include '**/*.java'
    exclude '**/gen/**'
    source = fileTree('src/main/java/')
    ruleSetFiles = files("config/pmd/pmd-config.xml")
}
